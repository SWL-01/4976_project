@page "/getMbti"
@using _4976Project.Data
@using _4976Project.Services
@using _4976Project.Models
@inject _4976Project.Services.MbtiService MbtiService
@using Radzen.Blazor

<PageTitle>Show MBTI</PageTitle>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>MBTI Data</h1>
    <hr />

    <RadzenDataGrid TItem="ApplicationUser" Data="@users" 
                    ColumnWidth="200px" 
                    AllowSorting="true" 
                    AllowPaging="true" 
                    PageSize="10">
        <Columns>
            <RadzenDataGridColumn TItem="ApplicationUser" Property="Email" Title="Email" Sortable="true" />
            <RadzenDataGridColumn TItem="ApplicationUser" Property="Mbti" Title="MBTI" Sortable="true" />
        </Columns>
    </RadzenDataGrid>
    <RadzenChart>
        <RadzenPieSeries Data="@series" CategoryProperty="Category" ValueProperty="Value">
        </RadzenPieSeries>
    </RadzenChart>
    <div class="findMbtiButton">
    <a class="btn btn-success" href="/findMbti">Find My MBTI!</a>
</div>
}

@code {
    private List<ApplicationUser> users;
    private List<PieSeries> series;

    protected override async Task OnInitializedAsync()
    {
        users = await MbtiService.GetAllUsers();

        var mbtiTypesToInclude = new List<string> { "INTJ", "INFP", "ENTP", "ESFJ", "INFJ", "ENFP", "ISTJ", "ISFJ", "ESTJ",
"ESFP", "ISTP", "ISFP", "ESTP", "ENFJ", "INTP", "ENTJ" };

        series = users
        .Where(u => mbtiTypesToInclude.Contains(u.Mbti))
        .GroupBy(u => u.Mbti)
        .Select(g => new PieSeries { Category = g.Key, Value = g.Count() })
        .ToList();
    }

    public class PieSeries
    {
        public string Category { get; set; }
        public int Value { get; set; }
    }
}

<style scoped>
    .findMbtiButton a {
        width: 12%;
        padding: 10px;
        margin-top: 10px;
        color: white;
        cursor: pointer;
        font-size: 16px;
    }
</style>