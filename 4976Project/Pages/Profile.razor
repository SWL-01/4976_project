@page "/profile"
@using Microsoft.AspNetCore.Identity
@using _4976Project.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject _4976Project.Services.MbtiService MbtiService
@using System.Net.Http.Headers;
@using Newtonsoft.Json.Linq;

<h1>User Profile</h1>
<hr />

@if (identityUser == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-md-4" style="margin-top: 50px; padding-right: 20px;">
                <section>
                    <form class="profileForm">
                        <div class="form-floating mb-3">
                            Name: <input type="text" class="profileInput" value="@identityUser.UserName" disabled>
                        </div>
                        @if (@identityUser.Mbti != null)
                        {
                            <div class="form-floating mb-3">MBTI: <input type="text" class="profileInput"
                                    value="@identityUser.Mbti" disabled></div>
                        }
                        else
                        {
                            <div class="form-floating mb-3">Mbti: Not Set</div>
                        }
                    </form>
                </section>
                <div class="findMbtiButton">
                    <button class="btn btn-outline-primary" @onclick="() => getDescription(identityUser.Mbti)">What is
                        @identityUser.Mbti like?</button>
                    <button class="btn btn-outline-info" @onclick="() => findMatch(identityUser.Mbti)">Who matches well with
                        @identityUser.Mbti?</button>
                    <button class="btn btn-outline-warning" @onclick="() => romanticRelationship(identityUser.Mbti)">@identityUser.Mbti's Romantic relationships?</button>
                    <a class="btn btn-success" href="/findMbti">Test again</a>
                </div>
            </div>
            @if (descriptionResponse)
            {
                <div class="col-md-6 col-md-offset-2">
                    <section class="secondSection">
                        <h4>What is @identityUser.Mbti like?</h4>
                        <hr>
                        <div class="descriptionBox">
                            <p>@description</p>
                        </div>
                    </section>
                </div>
            }
            @if (matchResponse)
            {
                <div class="col-md-6 col-md-offset-2">
                    <section class="secondSection">
                        <h4>Who matches well with @identityUser.Mbti?</h4>
                        <hr>
                        <div class="descriptionBox">
                            <p>@matchDescription</p>
                        </div>
                    </section>
                </div>
            }
            @if (romaticResponse) 
            {
                <div class="col-md-6 col-md-offset-2">
                    <section class="secondSection">
                        <h4>@identityUser.Mbti's Romantic relationships?</h4>
                        <hr>
                        <div class="descriptionBox">
                            <p>@romanticDescription</p>
                        </div>
                    </section>
                </div>
            }
        </div>
    </div>
}

@code {
    private ApplicationUser identityUser;
    private bool descriptionResponse = false;
    private bool matchResponse = false;
    private bool romaticResponse = false;
    public string description = "";
    public string matchDescription = "";
    public string romanticDescription = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            identityUser = await UserManager.FindByNameAsync(user.Identity.Name);
        }
    }

    public async Task getDescription(string mbti)
    {
        descriptionResponse = false;
        matchResponse = false;
        romaticResponse = false;
        var combinedMessage = $"Describe about person whose MBTI is {mbti}";
        description = await MbtiService.getDescription(combinedMessage);
        descriptionResponse = true;
    }

    public async Task findMatch(string mbti)
    {
        descriptionResponse = false;
        matchResponse = false;
        romaticResponse = false;
        var combinedMessage = $"What MBTI types match well with {mbti}?";
        matchDescription = await MbtiService.findMatch(combinedMessage);
        matchResponse = true;
    }

    public async Task romanticRelationship(string mbti)
    {
        descriptionResponse = false;
        matchResponse = false;
        romaticResponse = false;
        var combinedMessage = $"What is {mbti}'s romantic relationships?";
        romanticDescription = await MbtiService.findRomanticRelationships(combinedMessage);
        romaticResponse = true;
    }
}

<style scoped>
    .profileForm {
        font-size: 22px;
    }

    .descriptionBox {
        font-size: 19px;
    }

    .secondSection {
        padding-left: 30px;
        margin-top: 50px;
        border-left: 3px solid #ccc;
    }

    .secondSection h4 {
        background-color: #ddc4ea;
        padding: 10px;
    }

    .profileInput {
        margin-top: 9px;
        font-size: 22px;
        width: 100%;
        border-radius: 6px;
        padding: 10px;
        background-color: white;
        border: 2px solid #ccc;
    }

    .findMbtiButton a,
    .findMbtiButton button {
        width: 100%;
        padding: 10px;
        margin-top: 10px;
        cursor: pointer;
        font-size: 16px;
        border-radius: 6px;
    }

    .findMbtiButton a {
        color: white;
    }

    .profile-container {
        width: 80%;
        margin: 0 auto;
        background-color: #f9f9f9;
        border-radius: 15px;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .profile-content h3 {
        color: #3a3a3a;
        margin-bottom: 10px;
    }

    .profile-content span {
        color: #555555;
        font-weight: normal;
    }
</style>